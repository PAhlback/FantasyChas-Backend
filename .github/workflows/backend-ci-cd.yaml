name: CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure?'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Build .NET application
        run: dotnet build --configuration Release

      - name: Docker login
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$REPO_NAME/app:${{ github.sha }} .
          docker push ghcr.io/$REPO_NAME/app:${{ github.sha }}

      - name: Set Docker Image Output
        run: echo "DOCKER_IMAGE=ghcr.io/${{ github.repository }}/app:${{ github.sha }}" > docker_image.env

      - name: Upload Docker Image Environment File
        uses: actions/upload-artifact@v2
        with:
          name: docker-image-env
          path: docker_image.env

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Download Docker Image Environment File
        uses: actions/download-artifact@v2
        with:
          name: docker-image-env
          path: .

      - name: Read Docker Image from Environment File
        id: read-docker-image
        run: |
          echo "::set-env name=DOCKER_IMAGE::$(grep '^DOCKER_IMAGE=' docker_image.env | cut -d'=' -f2)"
      - name: Terraform Plan
        run: terraform plan -var="docker_image=${{ env.DOCKER_IMAGE }}"
        working-directory: terraform

      - name: Azure Login
        run: |
          export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID

      - name: Terraform Init
        run: terraform init -backend-config="token=${{ secrets.TF_API_TOKEN }}"
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -var="docker_image=ghcr.io/${{ github.repository }}/app:${{ github.sha }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="docker_image=ghcr.io/${{ github.repository }}/app:${{ github.sha }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        working-directory: terraform

  destroy:
    if: github.event_name == 'workflow_dispatch'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Azure Login
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: terraform
