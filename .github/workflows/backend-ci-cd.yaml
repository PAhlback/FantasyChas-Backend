name: Build, Test, Dockerize, Deploy, and Destroy .NET Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy Terraform-managed resources'
        required: true
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: f-eighty7/fantasychas-backend

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the application
        run: dotnet build --configuration Release --no-restore

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Check if resource group exists
        id: check_rg
        run: |
          exists=$(az group exists --name rg-fantasychas)
          echo "::set-output name=exists::$exists"

      - name: Import resource group
        if: steps.check_rg.outputs.exists == 'true'
        run: |
          terraform import azurerm_resource_group.rg /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas

      - name: Check if virtual network exists
        id: check_vnet
        run: |
          exists=$(az network vnet show --name vnet-fantasychas --resource-group rg-fantasychas --query "name" -o tsv)
          echo "::set-output name=exists::$exists"

      - name: Import virtual network
        if: steps.check_vnet.outputs.exists == 'vnet-fantasychas'
        run: |
          terraform import azurerm_virtual_network.vnet /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas/providers/Microsoft.Network/virtualNetworks/vnet-fantasychas

      - name: Check if subnet exists
        id: check_subnet
        run: |
          exists=$(az network vnet subnet show --name subnet-fantasychas --resource-group rg-fantasychas --vnet-name vnet-fantasychas --query "name" -o tsv)
          echo "::set-output name=exists::$exists"

      - name: Import subnet
        if: steps.check_subnet.outputs.exists == 'subnet-fantasychas'
        run: |
          terraform import azurerm_subnet.subnet /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas/providers/Microsoft.Network/virtualNetworks/vnet-fantasychas/subnets/subnet-fantasychas

      - name: Check if network interface exists
        id: check_nic
        run: |
          exists=$(az network nic show --name nic-fantasychas --resource-group rg-fantasychas --query "name" -o tsv)
          echo "::set-output name=exists::$exists"

      - name: Import network interface
        if: steps.check_nic.outputs.exists == 'nic-fantasychas'
        run: |
          terraform import azurerm_network_interface.nic /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas/providers/Microsoft.Network/networkInterfaces/nic-fantasychas

      - name: Check if public IP exists
        id: check_public_ip
        run: |
          exists=$(az network public-ip show --name pip-fantasychas --resource-group rg-fantasychas --query "name" -o tsv)
          echo "::set-output name=exists::$exists"

      - name: Import public IP
        if: steps.check_public_ip.outputs.exists == 'pip-fantasychas'
        run: |
          terraform import azurerm_public_ip.public_ip /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas/providers/Microsoft.Network/publicIPAddresses/pip-fantasychas

      - name: Check if virtual machine exists
        id: check_vm
        run: |
          exists=$(az vm show --name vm-fantasychas --resource-group rg-fantasychas --query "name" -o tsv)
          echo "::set-output name=exists::$exists"

      - name: Import virtual machine
        if: steps.check_vm.outputs.exists == 'vm-fantasychas'
        run: |
          terraform import azurerm_virtual_machine.vm /subscriptions/338906d8-4c3f-4170-8dfe-09d3ec8664a6/resourceGroups/rg-fantasychas/providers/Microsoft.Compute/virtualMachines/vm-fantasychas

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ghcr_username: ${{ secrets.GHCR_USERNAME }}
          TF_VAR_ghcr_token: ${{ secrets.GHCR_TOKEN }}

  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Destroy
        run: terraform -chdir=terraform destroy -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ghcr_username: ${{ secrets.GHCR_USERNAME }}
          TF_VAR_ghcr_token: ${{ secrets.GHCR_TOKEN }}
